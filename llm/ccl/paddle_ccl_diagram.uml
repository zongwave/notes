@startuml
package "PaddlePaddle Distributed Framework" {

  ' instruction_util.cc
  package "instruction_util.cc" {
    class InstructionUtil {
      +ParseDeviceContext(op: Operation, place: Place): DeviceContext*
      +GetOrCreateCommContext(op: Operation, pg: ProcessGroup*): CommContext*
      -DetermineExecutionStream(op: Operation): Stream*
      -LogContextInfo(op: Operation, context: DeviceContext*)
    }
    note right: "高层工具：解析算子上下文，准备设备和通信环境"
  }

  ' process_group_custom.cc
  package "process_group_custom.cc" {
    class ProcessGroupCustom {
      +ProcessGroupCustom(rank: int, nranks: int, place: Place)
      +AllReduce(tensor: Tensor, opts: AllReduceOptions): void
      -InitXCCLContext(): void
      -comm_context_: CommContext*
    }
    class ProcessGroup {
      +GetRank(): int {abstract}
      +GetNranks(): int {abstract}
      +GetCommContext(): CommContext* {abstract}
    }
    ProcessGroupCustom -up-|> ProcessGroup : "继承"
    note right: "中层实现：封装自定义设备（如HPU）的分布式通信"
  }

  ' comm_context_manager.cc
  package "comm_context_manager.cc" {
    class CommContextManager {
      +InitXCCLContext(rank: int, nranks: int, unique_key: string): CommContext*
      +GetCommContext(unique_key: string): CommContext*
      -GenerateUniqueId(): string
      -context_map_: map<string, CommContext*>
    }
    note right: "底层管理：提供全局通信上下文和unique_id一致性"
  }

  ' device_manager.cc
  package "device_manager.cc" {
    class DeviceManager {
      +Register(device_impl: DeviceInterface*): bool
      +GetDeviceWithPlace(place: Place): Device*
      +CCLGetUniqueId(device_type: string, root_id: CCLRootId*): void
      +CCLCommInitRank(device_type: string, num_ranks: size_t, root_id: CCLRootId*, rank_id: size_t, ccl_comm: CCLComm*): void
      +CCLAllReduce(device_type: string, in_data: void*, out_data: void*, num: size_t, data_type: DataType, reduce_op: CCLReduceOp, ccl_comm: CCLComm, stream: Stream): void
      -device_impl_map_: map<string, DeviceInterface*>
      -device_map_: map<string, vector<Device*>>
    }
    class Device {
      +CreateStream(stream: Stream*, priority: Priority, flag: Flag): void
      +MemoryCopyH2D(dst: void*, src: void*, size: size_t, stream: Stream*): void
      +MemoryAllocate(size: size_t): void*
      -impl_: DeviceInterface*
      -dev_id_: size_t
    }
    class DeviceInterface {
      +InitDevice(dev_id: size_t): void {abstract}
      +CreateStream(dev_id: size_t, stream: Stream*, priority: Priority, flag: Flag): void {abstract}
      +CCLGetUniqueId(root_id: CCLRootId*): void {abstract}
      +CCLCommInitRank(num_ranks: size_t, root_id: CCLRootId*, rank_id: size_t, ccl_comm: CCLComm*): void {abstract}
      +CCLAllReduce(in_data: void*, out_data: void*, num: size_t, data_type: DataType, reduce_op: CCLReduceOp, ccl_comm: CCLComm, stream: Stream): void {abstract}
    }
    DeviceManager o--> Device : "管理"
    Device --> DeviceInterface : "依赖"
    note right: "全局设备管理：注册设备并提供CCL通信接口"
  }

  ' device_context.cc
  package "device_context.cc" {
    class DeviceContext {
      +GetStream(): Stream*
      +GetPlace(): Place
      +SetAllocator(allocator: Allocator*): void
      +SetGenerator(generator: Generator*): void
    }
    class CustomContext {
      +CustomContext(place: Place)
      +stream(): Stream*
    }
    DeviceContext <|-- CustomContext : "继承"
    note right: "设备上下文：管理流和分配器，支持自定义设备"
  }

  ' runtime.cc (HPU Wrapper)
  package "runtime.cc" {
    class HPUDeviceInterface {
      +InitDevice(dev_id: size_t): void
      +CreateStream(dev_id: size_t, stream: Stream*, priority: Priority, flag: Flag): void
      +CreateEvent(dev_id: size_t, event: Event*, flags: Flag): void
      +MemoryAllocate(dev_id: size_t, size: size_t): void*
      +MemoryCopyH2D(dev_id: size_t, dst: void*, src: void*, size: size_t, stream: Stream*): void
      +CCLGetUniqueId(root_id: CCLRootId*): void
      +CCLCommInitRank(num_ranks: size_t, root_id: CCLRootId*, rank_id: size_t, ccl_comm: CCLComm*): void
      +CCLAllReduce(in_data: void*, out_data: void*, num: size_t, data_type: DataType, reduce_op: CCLReduceOp, ccl_comm: CCLComm, stream: Stream): void
      -Type(): string = "intel_hpu"
    }
    HPUDeviceInterface -up-|> DeviceInterface : "实现"
    note right: "HPU运行时：实现设备操作和HCCL通信"
  }

  ' 通用类
  class CommContext {
    +GetRank(): int
    +GetNranks(): int
    +GetUniqueId(): string
  }

  class Stream {
    +Priority
    +Flag
  }

  class Event {
    +Flag
  }

  ' 关系标注
  InstructionUtil --> ProcessGroupCustom : "调用获取通信组\n(GetOrCreateCommContext)"
  InstructionUtil --> DeviceContext : "解析并返回\n(ParseDeviceContext)"
  ProcessGroupCustom --> CommContextManager : "初始化XCCL上下文\n(InitXCCLContext)"
  ProcessGroupCustom --> CommContext : "持有"
  CommContextManager --> DeviceManager : "调用CCL接口\n(CCLGetUniqueId, CCLCommInitRank)"
  CommContextManager --> CommContext : "创建和管理"
  DeviceManager --> HPUDeviceInterface : "注册\n(Register)"
  DeviceManager --> DeviceContext : "通过Place获取\n(GetDeviceWithPlace)"
  Device --> HPUDeviceInterface : "实现由HPU提供"
  DeviceContext --> Stream : "包含"
  HPUDeviceInterface --> Stream : "创建"
  HPUDeviceInterface --> Event : "创建"

  ' 协作关系注释
  note bottom of InstructionUtil
    "1. 解析算子上下文，触发分布式操作"
  end note
  note bottom of ProcessGroupCustom
    "2. 协调分布式通信，初始化HCCL"
  end note
  note bottom of CommContextManager
    "3. 管理通信上下文，确保多设备同步"
  end note
  note bottom of DeviceManager
    "4. 提供设备管理和CCL接口"
  end note
  note bottom of DeviceContext
    "5. 提供设备上下文和资源管理"
  end note
  note bottom of HPUDeviceInterface
    "6. HPU具体实现：执行设备操作和通信"
  end note
}

@enduml